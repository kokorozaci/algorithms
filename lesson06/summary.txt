Вариант 1:
самый оптимальный т.к. в переменные сохраняются только цифры в формате int, которые занимают в памяти 28 байт.
При этом основное число уменьшается по мере выполнения программы.

# num:  type= <class 'int'>, size= 28, object= 789553350
# a:  type= <class 'int'>, size= 28, object= 1
# b:  type= <class 'int'>, size= 28, object= 1

Вариант 2:
лучше не использовать в процессе анализа списки и друние структуры, которые накапливают промежуточные значения.
в процессе выполнения программ переменная в которую сохраняются значения занимает всё больше памяти. 

# a:  type= <class 'list'>, size= 96, object= [5, 0]
# 	 type= <class 'int'>, size= 28, object= 5
# 	 type= <class 'int'>, size= 24, object= 0
....
# a:  type= <class 'list'>, size= 192, object= [5, 0, 5, 3, 3, 5, 5, 9, 8, 7]

Вариант 3: 
Не плох, только переменная в строковом формате в 2 раза больше чем int
но это фикированное значение и всего 50 байт.

# num:  type= <class 'str'>, size= 59, object= 7895533505
# a:  type= <class 'int'>, size= 24, object= 0
# b:  type= <class 'int'>, size= 28, object= 1
# i:  type= <class 'str'>, size= 50, object= 7

Общий вывод: самый оптимальный по расходу памяти вариант, вариант в котором вычисления проводятся на лету, без сохранения всех данных в промежуточную перемеенную. И если удаётся обойтись значениями в пределах чисел 0-255 в формате int память по сути не расходуестя т.к. эти числа и так есть в памяти и меняются только ссылки у переменных.